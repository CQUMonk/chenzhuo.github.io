(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{238:function(v,t,e){"use strict";e.r(t);var _=e(0),a=Object(_.a)({},(function(){var v=this,t=v.$createElement,e=v._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"javascript的事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript的事件循环","aria-hidden":"true"}},[v._v("#")]),v._v(" JavaScript的事件循环")]),v._v(" "),e("p",[v._v("对于任何一门编程语言来说，大都是通过自身所规定的语法和词法来表达一定的语义，从而来操作运行时的"),e("code",[v._v("数据结构")]),v._v("与"),e("code",[v._v("执行过程")]),v._v("。")]),v._v(" "),e("p",[v._v("本文对JavaScript的执行过程进行了简单概述，并对这个过程中所涉及到的事件循环等知识点进行了梳理和索引。")]),v._v(" "),e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[v._v("#")]),v._v(" Overview")]),v._v(" "),e("p",[v._v("在继续讨论之前，我们需要对JavaScript代码的执行过程和相关概念有一个整体上的感知。\n我们都知道，考虑到与浏览器的交互，JavaScript在设计之初就采用了单线程 + 回调队列的执行方式，因此不存在多线程并发的模型。")]),v._v(" "),e("p",[v._v("当宿主环境（浏览器，Node）加载到一段JS脚本后， 会发起相应的执行任务，将代码交给交给"),e("code",[v._v("JavaScript Engine")]),v._v("执行。")]),v._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[v._v("JavaScript Engine")]),v._v(" "),e("p",[v._v("在运行过程中，"),e("code",[v._v("JavaScript Engine")]),v._v("常驻内存中，负责JS代码的解析和执行，主要包括以下两个部分：")]),v._v(" "),e("ul",[e("li",[v._v("执行栈： 执行栈的每一帧用于存放函数的执行上下文环境，每一个栈元素对应一个函数；")]),v._v(" "),e("li",[v._v("内存堆： 用于存放程序运行过程中为对象分配的空间")])]),v._v(" "),e("p",[v._v("有关JavaScript执行上下文的相关细节请参见"),e("router-link",{attrs:{to:"/tech/js/js-context.html"}},[v._v("「The Execution Context of Javascript」")])],1)]),v._v(" "),e("p",[v._v("在代码执行过程中，除了宿主环境本身可以向"),e("code",[v._v("JavaScript Engine")]),v._v("分配执行任务之外， "),e("code",[v._v("JavaScript Engine")]),v._v("自身在代码运行过程中也可以向"),e("code",[v._v("JavaScript Engine")]),v._v("发起执行任务。")]),v._v(" "),e("p",[v._v("这种由宿主环境发起的执行任务通常被称为宏观任务（"),e("code",[v._v("MacroTask")]),v._v("）, 而由"),e("code",[v._v("JavaScript Engine")]),v._v("本身发起的执行任务则被称为"),e("code",[v._v("微观任务(MicroTask)")]),v._v(".")]),v._v(" "),e("p",[v._v("那么，宿主环境如何才能合理地向"),e("code",[v._v("JavaScript Engine")]),v._v("分配任务，并保证这些任务能在单线程中同步且非阻塞地执行呢？")]),v._v(" "),e("h2",{attrs:{id:"event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-loop","aria-hidden":"true"}},[v._v("#")]),v._v(" Event Loop")]),v._v(" "),e("p",[v._v("对于宿主环境而言，也并非只有在加载到代码片段后才有机会向"),e("code",[v._v("JavaScript Engine")]),v._v("发起宏观任务，\n在代码执行过程中，我们也可以通过一些特定的API（例如"),e("code",[v._v("setTimeOut")]),v._v("等）发起新的宏观任务.")]),v._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[v._v("setTimeOut方法")]),v._v(" "),e("p",[v._v("设置一个定时器，该定时器在定时器到期后，宿主环境将所指定的回调函数或者代码作为一个宏观任务放入事件队列的末尾，等待执行。")])]),v._v(" "),e("p",[v._v("宿主将宏观任务按照发起顺序组织成一个事件队列， 并通过"),e("code",[v._v("Event Loop")]),v._v("机制来对任务的调度进行管理，方式如下：\n"),e("code",[v._v("Event Loop")]),v._v("监听"),e("code",[v._v("JavaScript Engine")]),v._v("执行栈中的任务执行进度，\n如果当前执行栈中所有函数执行完毕，则从事件队列中取出一个待执行的任务分配给"),e("code",[v._v("JavaScript Engine")]),v._v("执行.")]),v._v(" "),e("p",[e("img",{attrs:{src:"/javascript/js-execution/js-event-loop.png",alt:""}})]),v._v(" "),e("p",[v._v("在早期的版本中， JavaScript自身无法异步执行代码， 宿主环境分配给"),e("code",[v._v("JavaScript Engine")]),v._v("的任务按顺序执行。")]),v._v(" "),e("p",[v._v("单线程的情况下，如果我们试图同步地执行一些耗时操作，就会导致线程被阻塞。\n举个例子，我们在浏览器中同步地发起网络请求，那么在就会导致在网络请求返回结果之前，浏览器无法进行页面渲染，也无法执行其他操作。")]),v._v(" "),e("p",[v._v("随着JavaScript的发展，引入了"),e("code",[v._v("Promise")]),v._v("等异步回调的机制：")]),v._v(" "),e("blockquote",[e("p",[e("code",[v._v("Promise")]),v._v("是JavaScript的一种标准化的异步管理方式， 当需要执行耗时操作的时候， 不等待执行结果的返回，而是返回一个"),e("code",[v._v("Promise")]),v._v("给调用方， 方便调用方可以选择合适的时机来处理耗时操作的回调。")])]),v._v(" "),e("p",[e("code",[v._v("JavaScript Engine")]),v._v("在执行宏观任务的过程中， 通过"),e("code",[v._v("Promise")]),v._v("等语句可以发起异步操作， 异步操作的回调以微观任务的方式来调用执行。\n为了保证异步代码务必在同一个宏观任务中完成，每个宏观任务都维护了一个微观任务队列，这些微观任务需要在同一个宏观任务中完成。")]),v._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",[v._v("在通常认知里，我们会认为"),e("code",[v._v("Event Loop")]),v._v("队列中相关的调度操作属于宿主环境的职责。然而随着"),e("code",[v._v("Promise")]),v._v("机制的引入，也使"),e("code",[v._v("Event Loop")]),v._v("中事件的调度和操作变得更加细致和直接，\n因此ES6标准中也规定了"),e("code",[v._v("Event Loop")]),v._v("该如何工作，并把这部分工作划分到"),e("code",[v._v("JavaScript Engine")]),v._v("的职责范围内。")])]),v._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),e("p",[v._v("经过上面的简单介绍，我们对JavaScript"),e("code",[v._v("事件循环")]),v._v("相关知识进行了简单梳理。")])])}),[],!1,null,null,null);t.default=a.exports}}]);