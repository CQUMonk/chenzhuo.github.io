(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{222:function(e,t,i){"use strict";i.r(t);var a=i(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"综述"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#综述","aria-hidden":"true"}},[e._v("#")]),e._v(" 综述")]),e._v(" "),i("p",[e._v("自Android 4.4（KitKat）以后，WebView组件采用了Chromium 内核，包含了新版本的V8 JavaScript引擎和其他之前webview所不支持的新特性。在Android系统上，新的WebView与Chrome共用了相同的渲染引擎和JavaScript解析引擎。")]),e._v(" "),i("p",[e._v("在Android 5.0 (Lollipop)系统之后，WebView被单独提取出来作为一个apk，从而保证WebView的升级更新不依赖于系统的升级更新。")]),e._v(" "),i("h2",{attrs:{id:"基本配置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#基本配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本配置")]),e._v(" "),i("p",[e._v("在Webview使用之前，需要根据业务需求对Webview本身进行一系列初始化操作，例如内核切换，Cookie补种等等，并通过"),i("code",[e._v("WebSettings")]),e._v("对Web进行合理的配置。")]),e._v(" "),i("p",[e._v("随着Webview自身以及内核的发展，一系列bug和安全问题也逐步被修复，但是由于碎片化的问题，我们也不得不针对低版本的系统进行兼容处理。")]),e._v(" "),i("p",[e._v("另外，如果我们使用了TBS X5内核， 还需要针对当前应用的不用内核进行特殊的配置和初始化操作。")]),e._v(" "),i("ul",[i("li",[i("p",[i("router-link",{attrs:{to:"/tech/webview/base-setting.html"}},[e._v("WebSettings基本配置")])],1)]),e._v(" "),i("li",[i("p",[i("router-link",{attrs:{to:"/tech/webview/cookie-plant.html"}},[e._v("Cookie同步与管理")])],1)])]),e._v(" "),i("h2",{attrs:{id:"通信与交互"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#通信与交互","aria-hidden":"true"}},[e._v("#")]),e._v(" 通信与交互")]),e._v(" "),i("p",[e._v("Webview作为Web页面的容器，在处理H5页面的同时，也为开发者们提供了JavaScript与Native层之间相互调用的能力。这里对它们之间的交互手段和方法进行了一些总结和对比。")]),e._v(" "),i("ul",[i("li",[i("router-link",{attrs:{to:"/tech/webview/interface-js2java.html"}},[e._v("Web端调用客户端方法")])],1),e._v(" "),i("li",[i("router-link",{attrs:{to:"/tech/webview/interface-java2js.html"}},[e._v("客户端调用Web端方法")])],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);