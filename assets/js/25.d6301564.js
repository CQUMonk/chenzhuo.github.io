(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{228:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"函数式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数式编程")]),t._v(" "),s("h2",{attrs:{id:"lambda-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda-表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" Lambda 表达式")]),t._v(" "),s("p",[t._v("在我们的日常开发工作中（Java8 之前），我们经常会写一些简单的函数或者匿名内部类来执行一些可以被复用的逻辑和操作。例如从集合中筛选出符合某一条件的元素，按钮被点击时触发的回调逻辑等等。")]),t._v(" "),s("p",[t._v("而之前我们提到了有关kotlin"),s("code",[t._v("函数式编程")]),t._v("的特性：将函数本身当作为参数值来传递、对于函数而言，特定输入对应特定输出，因此函数式编程更关心函数的结果而不是函数执行的过程。而"),s("code",[t._v("Lambda")]),t._v("表达式正是kotlin用来简化代码逻辑，实现函数式编程的方式。")]),t._v(" "),s("p",[t._v("在Kotlin提供的标准库中，大量的函数使用了"),s("code",[t._v("Lambda")]),t._v("表达式，它实质上是指可以被当做参数传递给函数的“代码块”，这些“代码块”不仅可以作为值传递给函数，而且可以当做变量存储。例如，我们希望计算两个值的和，lambda表达式如下：")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("整个表达式由大括号包裹，整体分为两部分：箭头左边是表达式所接收参数的声明，右侧是表达式的处理逻辑以及返回值，整个表达式可以作为值传递给其他函数处理。")]),t._v(" "),s("p",[t._v("为了让代码进一步简化，lambda表达式在相应场景下可以进一步的省略和优化：")]),t._v(" "),s("ul",[s("li",[t._v("如果函数最后一个入参是lambda表达式，那么该lambda表达式可以从函数入参括号中移出。")]),t._v(" "),s("li",[t._v("当lambda作为函数的唯一入参，那么调用该函数时，可以省略掉"),s("strong",[t._v("函数")]),t._v("的参数部分并直接跟上需要传入的lambda表达式；")]),t._v(" "),s("li",[t._v("利用“类型推断”的特性可以省略掉lambda表达式的参数类型")]),t._v(" "),s("li",[t._v("当lambda表达式本身只有一个入参，可以把参数部分省略掉，默认的入参名是"),s("code",[t._v("it")])])]),t._v(" "),s("p",[t._v("另外，在Java中我们无法在一个匿名内部类中来修改外部类的参数或者变量，因为该参数必须为final；而在kotlin中，我们完全可以在lambda表达式里来访问或修改外部的变量或者参数。")]),t._v(" "),s("p",[t._v("那么，如何定义一个函数，可以接受lambda表达式作为入参呢？")]),t._v(" "),s("h2",{attrs:{id:"高阶函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 高阶函数")]),t._v(" "),s("p",[t._v("在Kotlin中，通过lambda表达式或者函数引用，函数本身可以作为"),s("code",[t._v("高阶函数")]),t._v("的入参或者返回值。而定义一个"),s("code",[t._v("函数类型")]),t._v("需要声明该函数类型的入参类型和返回值类型：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(ParamType) -> ReturnType\n")])])]),s("p",[t._v("这里和函数的声明的不同点在于，即使返回值类型为Unit，也不能省略。我们写一个简单的例子来演示：两个Int值进行运算，并打印结果。")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("operAndPrint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("operFun"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("operFun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("operAndPrint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("operAndPrint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);