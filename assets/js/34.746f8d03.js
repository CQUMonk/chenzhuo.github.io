(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{221:function(e,t,o){"use strict";o.r(t);var _=o(0),n=Object(_.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"code-splitting-in-webpack"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#code-splitting-in-webpack","aria-hidden":"true"}},[e._v("#")]),e._v(" Code Splitting in Webpack\b")]),e._v(" "),o("p",[e._v("问题：随着业务的开发与迭代， 我们页面中所引用的JS文件体积也越来越大， 非常不利于浏览器缓存和页面响应速度。")]),e._v(" "),o("p",[e._v("为了解决这个问题， 通常会在工程构建中采用代码划分（Code Splitting）的方式来解决：")]),e._v(" "),o("ul",[o("li",[e._v("将公共模块代码与业务模块分离")]),e._v(" "),o("li",[e._v("实现业务模块的按需加载")])]),e._v(" "),o("p",[e._v("本文对 "),o("code",[e._v("Webpack")]),e._v(" 进行工程构建过程中的代码拆分操作进行了总结和整理。")]),e._v(" "),o("h2",{attrs:{id:"构建流程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#构建流程","aria-hidden":"true"}},[e._v("#")]),e._v(" 构建流程")]),e._v(" "),o("p",[e._v("在讨论代码划分之前，首先简单概述一下Webpack进行工程构建的整个过程。")]),e._v(" "),o("p",[e._v("在Webpack的"),o("code",[e._v("Config")]),e._v("文件中， "),o("code",[e._v("Entry")]),e._v("配置指定了整个工程的入口"),o("code",[e._v("Module")]),e._v("。\n当Webpack启动并开始执行构建时， 将以"),o("code",[e._v("Entry")]),e._v("所指定的"),o("code",[e._v("Module")]),e._v("为起点， 遍历查找它所依赖（引用）的所有"),o("code",[e._v("Module")]),e._v("，并通过相应"),o("code",[e._v("Loader")]),e._v("进行转换和解析。\n解析"),o("code",[e._v("Module")]),e._v("时候又会得到该"),o("code",[e._v("Module")]),e._v("所依赖的"),o("code",[e._v("Module")]),e._v("， 从入口模块开始，整个过程层层递归。\n每个"),o("code",[e._v("Entry")]),e._v("及其所依赖的"),o("code",[e._v("Module")]),e._v("都会被划分在同一个"),o("code",[e._v("Chunk")]),e._v("中， 并最终输出到对应的"),o("code",[e._v("Output")]),e._v("文件中。")]),e._v(" "),o("div",{staticClass:"tip custom-block"},[o("p",[o("code",[e._v("Entry")]),e._v("的类型可以为"),o("code",[e._v("String")]),e._v("， "),o("code",[e._v("Array")]),e._v("， "),o("code",[e._v("Object")]),e._v("或者它们之间的组合，其中只有"),o("code",[e._v("Object")]),e._v("类型会输出多个"),o("code",[e._v("Chunk")]),e._v(".")])]),e._v(" "),o("p",[e._v("从流程中不难看出，我们可以按照自己的需求将不同的"),o("code",[e._v("Module")]),e._v("拆分到指定的"),o("code",[e._v("Chunk")]),e._v("，并输出到不同构建结果中。")]),e._v(" "),o("h2",{attrs:{id:"代码拆分"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#代码拆分","aria-hidden":"true"}},[e._v("#")]),e._v(" 代码拆分")]),e._v(" "),o("p",[e._v("在"),o("code",[e._v("Webpack 4")]),e._v("之前， 我们通常会配置"),o("a",{attrs:{href:"https://webpack.docschina.org/plugins/commons-chunk-plugin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CommonsChunkPlugin"),o("OutboundLink")],1),e._v(" 来进行代码拆分， 相关操作可以参考：")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://medium.com/webpack/webpack-bits-getting-the-most-out-of-the-commonschunkplugin-ab389e5f318",target:"_blank",rel:"noopener noreferrer"}},[e._v(" Getting the most out of the CommonsChunkPlugin"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/26710831",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack 大法之 Code Splitting"),o("OutboundLink")],1)])]),e._v(" "),o("p",[e._v("而"),o("code",[e._v("Webpack 4")]),e._v("采用了 "),o("a",{attrs:{href:"https://webpack.docschina.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SplitChunksPlugin"),o("OutboundLink")],1),e._v(" 取代了 "),o("code",[e._v("CommonsChunkPlugin")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);